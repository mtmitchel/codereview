"""
Security vulnerability representation for the security analyzer.
"""

from typing import Dict, Any, Optional

class SecurityVulnerability:
    """
    Class to represent a security vulnerability found in code.
    """
    def __init__(self, 
                 file_path: str, 
                 line: int, 
                 vulnerability_type: str,
                 severity: str = "high", 
                 message: str = "",
                 code_snippet: Optional[str] = None,
                 confidence: str = "medium"):
        self.file_path = file_path
        self.line = line
        self.vulnerability_type = vulnerability_type
        self.severity = severity
        self.message = message
        self.code_snippet = code_snippet
        self.confidence = confidence  # Added confidence level
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert the vulnerability to a dictionary.
        
        Returns:
            Dictionary representation of the vulnerability
        """
        return {
            "file_path": self.file_path,
            "line": self.line,
            "vulnerability_type": self.vulnerability_type,
            "severity": self.severity,
            "message": self.message,
            "code_snippet": self.code_snippet,
            "confidence": self.confidence
        }
    
    def __str__(self) -> str:
        return f"{self.file_path}:{self.line} - {self.severity.upper()} ({self.confidence} confidence) {self.vulnerability_type}: {self.message}" 